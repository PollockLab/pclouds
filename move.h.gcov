        -:    0:Source:c:\mingw\bin\../lib/gcc/mingw32/4.6.2/include/c++/bits/move.h
        -:    0:Graph:clouds.gcno
        -:    0:Data:clouds.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// Move, forward and identity for C++0x + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  template<typename _Tp>
        -:   42:    inline _Tp*
        -:   43:    __addressof(_Tp& __r)
        -:   44:    {
        -:   45:      return reinterpret_cast<_Tp*>
        -:   46:	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
        -:   47:    }
        -:   48:
        -:   49:_GLIBCXX_END_NAMESPACE_VERSION
        -:   50:} // namespace
        -:   51:
        -:   52:#ifdef __GXX_EXPERIMENTAL_CXX0X__
        -:   53:#include <type_traits> // Brings in std::declval too.
        -:   54:
        -:   55:namespace std _GLIBCXX_VISIBILITY(default)
        -:   56:{
        -:   57:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   58:  
        -:   59:  /// forward (as per N3143)
        -:   60:  template<typename _Tp>
        -:   61:    inline _Tp&&
        -:   62:    forward(typename std::remove_reference<_Tp>::type& __t) 
        -:   63:    { return static_cast<_Tp&&>(__t); }
        -:   64:
        -:   65:  template<typename _Tp>
        -:   66:    inline _Tp&&
        -:   67:    forward(typename std::remove_reference<_Tp>::type&& __t) 
        -:   68:    {
        -:   69:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   70:		    " substituting _Tp is an lvalue reference type");
        -:   71:      return static_cast<_Tp&&>(__t);
        -:   72:    }
        -:   73:
        -:   74:  /**
        -:   75:   *  @brief Move a value.
        -:   76:   *  @ingroup mutating_algorithms
        -:   77:   *  @param  __t  A thing of arbitrary type.
        -:   78:   *  @return Same, moved.
        -:   79:  */
        -:   80:  template<typename _Tp>
        -:   81:    inline typename std::remove_reference<_Tp>::type&&
        -:   82:    move(_Tp&& __t)
        -:   83:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        -:   84:
        -:   85:  /// declval, from type_traits.
        -:   86:
        -:   87:  /**
        -:   88:   *  @brief Returns the actual address of the object or function
        -:   89:   *         referenced by r, even in the presence of an overloaded
        -:   90:   *         operator&.
        -:   91:   *  @param  __r  Reference to an object or function.
        -:   92:   *  @return   The actual address.
        -:   93:  */
        -:   94:  template<typename _Tp>
        -:   95:    inline _Tp*
        -:   96:    addressof(_Tp& __r)
        -:   97:    { return std::__addressof(__r); }
        -:   98:
        -:   99:_GLIBCXX_END_NAMESPACE_VERSION
        -:  100:} // namespace
        -:  101:
        -:  102:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  103:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  104:#else
        -:  105:#define _GLIBCXX_MOVE(__val) (__val)
        -:  106:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  107:#endif
        -:  108:
        -:  109:namespace std _GLIBCXX_VISIBILITY(default)
        -:  110:{
        -:  111:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  112:
        -:  113:  /**
        -:  114:   *  @brief Swaps two values.
        -:  115:   *  @ingroup mutating_algorithms
        -:  116:   *  @param  __a  A thing of arbitrary type.
        -:  117:   *  @param  __b  Another thing of arbitrary type.
        -:  118:   *  @return   Nothing.
        -:  119:  */
        -:  120:  template<typename _Tp>
        -:  121:    inline void
   109624:  122:    swap(_Tp& __a, _Tp& __b)
        -:  123:    {
        -:  124:      // concept requirements
        -:  125:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  126:
   109624:  127:      _Tp __tmp = _GLIBCXX_MOVE(__a);
   109624:  128:      __a = _GLIBCXX_MOVE(__b);
   109624:  129:      __b = _GLIBCXX_MOVE(__tmp);
   109624:  130:    }
        -:  131:
        -:  132:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:  // DR 809. std::swap should be overloaded for array types.
        -:  134:  template<typename _Tp, size_t _Nm>
        -:  135:    inline void
        -:  136:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  137:    {
        -:  138:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  139:	swap(__a[__n], __b[__n]);
        -:  140:    }
        -:  141:
        -:  142:_GLIBCXX_END_NAMESPACE_VERSION
        -:  143:} // namespace
        -:  144:
        -:  145:#endif /* _MOVE_H */
